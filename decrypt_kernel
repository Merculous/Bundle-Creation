#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path

from bundle_creation.archive import Archive
from bundle_creation.file import removeFile, writeBinaryFile
from bundle_creation.ipsw import getIpswInfo
from bundle_creation.wiki import getKeys
from bundle_creation.xpwntool import decryptXpwn


def extractKernelFromIPSW(archive, name):
    data, kernel = None, None

    for path in archive._listPaths():
        if path.filename.startswith('kernelcache'):
            kernel = path
            data = archive._readPath(kernel)

    if data:
        writeBinaryFile(data, name)
    else:
        raise Exception('Got here!')


def getValuesForKeys(archive):
    manifest = getIpswInfo(archive)

    values = (
        manifest['codename'],
        manifest['buildid'],
        manifest['device']
    )

    return values


def main():
    parser = ArgumentParser()

    parser.add_argument('--orig', nargs=1, metavar='IPSW', help='unpatched')
    parser.add_argument('--patched', nargs=1, metavar='IPSW', help='patched')

    args = parser.parse_args()

    if args.orig:
        work_paths = ('kernelcache.orig', 'kernelcache.patched')

        with Archive(args.orig[0]) as o:
            values = getValuesForKeys(o)

            extractKernelFromIPSW(o, work_paths[0])

        if args.patched:
            with Archive(args.patched[0]) as p:
                extractKernelFromIPSW(p, work_paths[1])

        keys = getKeys(*values)['KernelCache']

        name, iv, key = keys

        for path in work_paths:
            if Path(path).exists():
                decryptXpwn(path, f'{path}.decrypted', iv, key)

                removeFile(path)

    else:
        parser.print_help()


if __name__ == '__main__':
    main()
